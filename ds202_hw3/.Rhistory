head(x)
str(x)
hist(ames$Murder)
plot(ames$Year, ames$Murder)
hist(ames$Murder, breaks=c(0, 5))
hist(ames$Murder, breaks=seq(0, 5))
pairs(x)
plot(x$Murder, x$Burglary)
plot(x$Burglary, x$Murder)
plot(log(x$Burglary), log(x$Murder))
plot(log(x$Murder), log(x$Burglary))
plot(x$Motor.vehicle.theft, log(x$Burglary))
plot(log(x$Burglary), x$Motor.vehicle.theft)
str(cities)
clear
rm(list=ls())
?Boston
install("MASS")
packages.install("MASS")
install.packages("MASS")
cars
str(cars)
?cars
c = cars
plot(c$speed, c$dist)
cor(mtcars)
?mtcars
lm(dist ~ speed, data=cars)
m = lm(dist ~ speed, data=cars)
str(m)
summary(m)
?cor
x = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)
y = c(1,3.5,4,7.5,7,5.5,5,4.5,10,4.5,8,7.5,6,11.5,9,13.5,11,12.5,10,9.5,10,16.5,17,16.5,15,18.5,17,15.5,17,16.5)
length(x)
length(y)
cor(x, y)
df = data.frame(x = x, y = y)
lm(y ~ x, data = df)
plot(x, y)
newdata = c(13.5, 14.5, 15.5)
lm = lm(y ~ x, data=df)
lm
predict(lm, newdata)
linear.model = lm(y ~ x, data=df)
predict(linear.model, newdata)
?predict
new.data = newdata
rm(newdata)
rm(lm)
predict(linear.model, newdata = new.data)
new.data
linear.model
new.data = data.frame(x = c(13.5, 14.5, 15.5))
predict(linear.model, newdata = new.data)
m = lm(qsec ~ disp + hp, data=mtcars)
m
rm(list=ls())
library(classdata)
str(fbi)
head(fbi)
summary(fbi)
summary(fbi)
head(fbi)
2017 - 1961
fbi[1:56,]
fbi[50:110,]
head(fbi)
summary(fbi)
2012 - 1961
51*52*8
str(fbi)
summary(fbi)
f = fbi
f$Year = factor(f$Year)
str(f)
2017 - 1961
summary(f)
str(fbi)
levels(fbi$Type)
str(fbi)
fbi$Violent.crime.per.thousand = fbi$Count / (fbi$Population / 1000)
boxplot(fbi$Count ~ fbi$Type)
?boxplot
boxplot(Count ~ Type, data=fbi)
boxplot(Count ~ Type, data=fbi, ylim(0, 4e+05))
boxplot(Count ~ Type, data=fbi, ylim=c(0, 4e+05))
summary(fbi)
setwd("C:/Users/Brian/Google Drive/Classes/DS 202 - Exploratory Data Analysis/Homework/ds202_hw3")
knitr::opts_chunk$set(echo = TRUE)
data(tips, package="reshape2")
dim(tips)
str(tips)
(numParty = dim(tips)[1])
day = tips$day
(day = relevel(day, "Thur"))
day = tips$day
day = relevel(day, "Thur")
day
str(tips)
female5 = tips[(tips$sex == "Female" & tips$size >= 5), ]
str(female5)
head(tips)
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
# Second view
plot(density(tips$tip), main="Density plot of tips", xlab="Tip")
rug(tips$tip)
points(mean(tips$tip), 0, pch=19, col="red", cex=2)
text(mean(tips$tip), 0, pos=3, labels=bquote(bar(x) == .(mean(tips$tip))))
library(ggplot2)
data(tips, package="reshape2")
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=tip, y=total_bill)) + geom_point()
# Second view
# plot(density(tips$tip), main="Density plot of tips", xlab="Tip")
# rug(tips$tip)
# points(mean(tips$tip), 0, pch=19, col="red", cex=2)
# text(mean(tips$tip), 0, pos=3, labels=bquote(bar(x) == .(mean(tips$tip))))
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point()
# Second view
# plot(density(tips$tip), main="Density plot of tips", xlab="Tip")
# rug(tips$tip)
# points(mean(tips$tip), 0, pch=19, col="red", cex=2)
# text(mean(tips$tip), 0, pos=3, labels=bquote(bar(x) == .(mean(tips$tip))))
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + xlab("Total Bill") + ylab("Tip") + main("Tips as a function of Total Bill")
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips as a function of Total Bill")
# Second view
# plot(density(tips$tip), main="Density plot of tips", xlab="Tip")
# rug(tips$tip)
# points(mean(tips$tip), 0, pch=19, col="red", cex=2)
# text(mean(tips$tip), 0, pos=3, labels=bquote(bar(x) == .(mean(tips$tip))))
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips as a function of Total Bill")
# Second view
# plot(density(tips$tip), main="Density plot of tips", xlab="Tip")
# rug(tips$tip)
# points(mean(tips$tip), 0, pch=19, col="red", cex=2)
# text(mean(tips$tip), 0, pos=3, labels=bquote(bar(x) == .(mean(tips$tip))))
ggplot(tips, aes(x="tip")) + geom_density()
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips as a function of Total Bill")
# Second view
# plot(density(tips$tip), main="Density plot of tips", xlab="Tip")
# rug(tips$tip)
# points(mean(tips$tip), 0, pch=19, col="red", cex=2)
# text(mean(tips$tip), 0, pos=3, labels=bquote(bar(x) == .(mean(tips$tip))))
ggplot(tips, aes(x="tip")) + geom_density(kernel="gaussian")
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips as a function of Total Bill")
#ggplot(tips, aes(x="tip")) + geom_density(kernel="gaussian")
ggplot(tips, aes(x="tip")) + geom_histogram()
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips as a function of Total Bill")
#ggplot(tips, aes(x="tip")) + geom_density(kernel="gaussian")
ggplot(tips, aes(x="tip"), stat="count") + geom_histogram()
m = matrix(data=c(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# Simplest to implement
#plot(tip ~ total_bill, data=tips, main="Tips as a Function of Total Bill", xlab="Total Bill", ylab="Tip")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips as a function of Total Bill")
#ggplot(tips, aes(x="tip")) + geom_density(kernel="gaussian")
ggplot(tips, aes(x="tip")) + geom_histogram(stat="count")
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
#ggplot(tips, aes(x="tip")) + geom_density(kernel="gaussian")
ggplot(tips, aes(x="tip")) + geom_histogram(stat="count")
#ggplot(tips, aes(x="tip")) + geom_density(kernel="gaussian")
t = table(tips$tip)
ggplot(tips, aes(x=t)) + geom_histogram(stat="count")
tips
tips
(t = table(tips$tip))
t = table(tips$tip)
hist(t)
t = table(tips$tip)
str(t)
#ggplot(t)
t = table(tips$tip)
str(t)
ggplot(t) + geom_histogram()
ggplot(tips, aes(x="tip")) + geom_density()
set.seed(1234)
df = data.frame()
df = data.frame(
sex = factor(rep(c("M", "F"), each=200)),
weight = c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5))
)
head(df)
ggplot(df, aes(x="weight")) + geom_density()
?geom_density
df = data.frame(
sex = factor(rep(c("M", "F"), each=200)),
weight = round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5)))
)
ggplot(df, aes(x="weight")) + geom_density()
head(df)
ggplot(df, aes(x=weight)) + geom_density()
ggplot(tips, aes(x=tip)) + geom_density()
ggplot(tips, aes(x=tip)) + geom_density()
# First visualization - simple plot
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
# Second visualization - density plot
ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips")
m = matrix(data=(1, 1, 1, 2, 2, 2), nrow=2, ncol=3, byrow=TRUE)
m = matrix(data=("1", "1", "1", "2", "2", "2"), nrow=2, ncol=3, byrow=TRUE)
m = matrix(data=c("1", "1", "1", "2", "2", "2"), nrow=2, ncol=3, byrow=TRUE)
layout(m)
# First visualization - simple plot
ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
# Second visualization - density plot
ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips")
# First visualization - simple plot
p = ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
m = lm(tip ~ total_bill, data=tips)
p + geom_abline(m)
# First visualization - simple plot
p = ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
m = lm(tip ~ total_bill, data=tips)
p + geom_abline(aes(m))
# First visualization - simple plot
p = ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
m = lm(tip ~ total_bill, data=tips)
p + geom_abline(aes(intercept=m$coefficients[1], slope=m$coefficients[2]))
# First visualization - simple plot
p = ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
m = lm(tip ~ total_bill, data=tips)
p + geom_abline(aes(intercept=m$coefficients[1], slope=m$coefficients[2]), col="red")
# Second visualization - density plot
ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips")
# Second visualization - density plot
g = ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips")
g + geom_point(x = mean(tips$tip), y=0, col="red", cex=3)
# Second visualization - density plot
g = ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips")
g + geom_point(x = mean(tips$tip), y=0, col="red", cex=3)
# Calculate a tip rate as a percent
tips$tiprate = (tips$tip / tips$total_bill) * 100
# Output the mean (as a percent)
mean(tips$tiprate)
str(tips)
g = ggplot(tips, aes(x=time, y=tiprate))
g = ggplot(tips, aes(x=time, y=tiprate)) + geom_boxplot()
g = ggplot(tips, aes(x=time, y=tiprate)) + geom_boxplot()
(g = ggplot(tips, aes(x=time, y=tiprate)) + geom_boxplot())
t = tips
reorder(t$time, levels=c("Lunch", "Dinner"))
?reorder
t = tips
?relevel
reorder(t$time, levels=c("Lunch", "Dinner"))
reorder(t$time, levels=levels(t)["Lunch", "Dinner"])
?fct_reorder
library(tidyverse)
install.packages("tidyverse")
install.packages("forcats")
library(ggplot2)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("bindrcpp")
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(tidyverse)
library(forcats)
data(tips, package="reshape2")
?fct_reorder
(g = ggplot(tips, aes(x=fct_reorder(time, c("Lunch", "Dinner")), y=tiprate)) + geom_boxplot())
x = factor(sample(letters[1:5], 100, replace=TRUE))
x
str(x)
tips$time = factor(tips$time, levels(tips$time)[c("Lunch", "Dinner")])
(g = ggplot(tips, aes(x=time,y=tiprate)) + geom_boxplot())
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(forcats)
data(tips, package="reshape2")
(numParty = dim(tips)[1])
# A little vague
str(tips)
day = tips$day
(day = relevel(day, "Thur"))
female5 = tips[(tips$sex == "Female" & tips$size >= 5), ]
# First visualization - simple plot
p = ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
# Linear regression model
m = lm(tip ~ total_bill, data=tips)
# Add red regression line to plot
p + geom_abline(aes(intercept=m$coefficients[1], slope=m$coefficients[2]), col="red")
# Second visualization - density plot
g = ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips with Mean Indicator")
g + geom_point(x = mean(tips$tip), y=0, col="red", cex=3)
# Calculate a tip rate as a percent
tips$tiprate = (tips$tip / tips$total_bill) * 100
# Output the mean (as a percent)
mean(tips$tiprate)
tips$time = factor(tips$time, levels(tips$time)[c("Lunch", "Dinner")])
boxplot(tips)
#(g = ggplot(tips, aes(x=time,y=tiprate)) + geom_boxplot())
tips$time = factor(tips$time, levels(tips$time)[c("Lunch", "Dinner")])
boxplot(x=tips$time, y=tips$tiprate)
tips$time = factor(tips$time, levels(tips$time)[c("Lunch", "Dinner")])
str(tips)
#(g = ggplot(tips, aes(x=time,y=tiprate)) + geom_boxplot())
tips$time = factor(tips$time, levels(tips$time)[c("Lunch", "Dinner")])
print(levels(tips$time))
#(g = ggplot(tips, aes(x=time,y=tiprate)) + geom_boxplot())
tips$time = factor(tips$time, levels("Lunch", "Dinner"))
tips$time = factor(tips$time, levels=c("Lunch", "Dinner"))
print(levels(tips$time))
#(g = ggplot(tips, aes(x=time,y=tiprate)) + geom_boxplot())
tips$time = factor(tips$time, levels=c("Lunch", "Dinner"))
str(tips)
#(g = ggplot(tips, aes(x=time,y=tiprate)) + geom_boxplot())
tips$time = factor(tips$time, levels=c("Lunch", "Dinner"))
str(tips)
boxplot(x=tips$time, y=tips$tiprate)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(forcats)
data(tips, package="reshape2")
(numParty = dim(tips)[1])
# A little vague
str(tips)
day = tips$day
(day = relevel(day, "Thur"))
female5 = tips[(tips$sex == "Female" & tips$size >= 5), ]
# First visualization - simple plot
p = ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
# Linear regression model
m = lm(tip ~ total_bill, data=tips)
# Add red regression line to plot
p + geom_abline(aes(intercept=m$coefficients[1], slope=m$coefficients[2]), col="red")
# Second visualization - density plot
g = ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips with Mean Indicator")
g + geom_point(x = mean(tips$tip), y=0, col="red", cex=3)
# Calculate a tip rate as a percent
tips$tiprate = (tips$tip / tips$total_bill) * 100
# Output the mean (as a percent)
mean(tips$tiprate)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(forcats)
data(tips, package="reshape2")
(numParty = dim(tips)[1])
# A little vague
str(tips)
day = tips$day
(day = relevel(day, "Thur"))
female5 = tips[(tips$sex == "Female" & tips$size >= 5), ]
# First visualization - simple plot
p = ggplot(tips, aes(x=total_bill, y=tip)) + geom_point() + labs(x="Total Bill", y="Tip", title="Tips vs Total Bill")
# Linear regression model
m = lm(tip ~ total_bill, data=tips)
# Add red regression line to plot
p + geom_abline(aes(intercept=m$coefficients[1], slope=m$coefficients[2]), col="red")
# Second visualization - density plot
g = ggplot(tips, aes(x=tip)) + geom_density() + labs(x="Tips", y="Density", title="Density Plot of Tips with Mean Indicator")
g + geom_point(x = mean(tips$tip), y=0, col="red", cex=3)
# Calculate a tip rate as a percent
tips$tiprate = (tips$tip / tips$total_bill) * 100
# Output the mean (as a percent)
mean(tips$tiprate)
str(tips)
t = tips
t$time = relevel(t$time, "Lunch")
t = tips
t$time = relevel(t$time, "Lunch")
levels(t$time)
t = tips
t$time = relevel(t$time, "Lunch")
levels(t$time)
boxplot(x=t$time, y=t$tiprate)
t = tips
t$time = relevel(t$time, "Lunch")
str(t)
t = tips
t$time = relevel(t$time, "Lunch")
ggplot(t, aes(x=time, y=tiprate)) + geom_boxplot()
t = tips
#t$time = relevel(t$time, "Lunch")
t$time = relevel(t$time, c("Lunch", "Dinner"))
t = tips
t$time = relevel(t$time, "Lunch")
ggplot(t, aes(x=time, y=tiprate)) + geom_boxplot()
pairs(tips)
pairs(tips[1:4])
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(classdata)
str(fbiwide)
ggplot(fbiwide, aes(x=Year, y=Murder)) + geom_point()
# Thas doesn't really work, so let's put each state in its own panel: ~State means each panel (facet) as a function of State
ggplot(fbiwide, aes(x=Year, y=Murder)) + geom_point() + facet_wrap(~State)
# Do it again, but with more columns and fewer rows
ggplot(fbiwide, aes(x=Year, y=Murder)) + geom_point() + facet_wrap(~State, ncol=10)
# Because some state data is so flat, we can scale the y-axis
ggplot(fbiwide, aes(x=Year, y=Murder)) + geom_point() + facet_wrap(~State, ncol=10, scales="free")
# The dots are so big this is "overplotting".  A better approach would be to use lines, instead of points
ggplot(fbiwide, aes(x=Year, y=Murder)) + geom_line() + facet_wrap(~State, ncol=10, scales="free")
ggplot(fbiwide, aes(x=Year, y=log(Motor.vehicle.theft))) + geom_line() + facet_wrap(~State, scales="free_y")
ggplot(fbiwide, aes(x=Year, y=Motor.vehicle.theft, color=State)) + geom_line()
# This approach produces an overplot; it is too difficult to make out individual state data (in comparison to faceting)
str(fbi)
str(fbiwide)
ggplot(fbi, aes(y=log10(Count))) + geom_boxplot()
# We an flip this instead
ggplot(fbi, aes(y=log10(Count))) + geom_boxplot() + coord_flip()
# Side-by-side boxplot
ggplot(fbi, aes(x=Type, y=log10(Count))) + geom_boxplot()
# The labels are not legible, so we can flip the coords to see this
ggplot(fbi, aes(x=Type, y=log10(Count))) + geom_boxplot() + coord_flip()
# To look at the crime RATE
ggplot(fbi, aes(x=Type, y=(Count) / (Population / 1000))) + geom_boxplot() + coord_flip()
ggplot(fbiwide, aes(x=Motor.vehicle.theft)) + geom_histogram()
# There may be a second mode (hump) but it isn't clear due to the wide bin width.  Shrink the binwidth
bw = 5000
ggplot(fbiwide, aes(x=Motor.vehicle.theft)) + geom_histogram(binwidth=bw)
# Histograms only show distributions of one variable.  If you want to compare all types of crimes.  This plot is severely
# overplotted.
ggplot(fbi, aes(x=log10(Count + 1), fill=Type)) + geom_histogram()
# To correct the overplotting we can plot side-by-side histograms
ggplot(fbi, aes(x=log10(Count + 1), fill=Type)) + geom_histogram(position="dodge")
# But there are too many bins to make things out, so add another argument
ggplot(fbi, aes(x=log10(Count + 1), fill=Type)) + geom_histogram(position="dodge", binwidth=0.5)
#**The Count+1 is to make sure that zero entries in the dataset show up
ggplot(fbi, aes(x=Type)) + geom_bar()
# This doesn't really work because the dataset reports the same number of each crime
ggplot(fbi, aes(x=Type)) + geom_bar(aes(weight=Count))
# or
ggplot(fbi, aes(x=Type, weight=Count)) + geom_bar()
#ggplot(fbi, aes(x=Violent.crime)) + geom_bar()
#ggplot(fbi, aes(x=Violent.crime, weight=Count, fill=Type)) + geom_bar() + facet_wrap(~Type)
ggplot(fbi, aes(x=Type, weight=Count, fill=Violent.crime)) + geom_bar() + coord_flip()
# The left and right is based on the TRUE or FALSE if the crime is VIOLENT CRIME
ggplot(fbi, aes(x=Count)) + geom_histogram() + facet_wrap(~Type, scales="free_x")
str(titanic)
summary(titanic)
# All four columns are factors
ggplot(titanic, aes(x=Sex, fill=Survived)) + geom_bar()
# Slightly more men than women survived, but far more men perished, i.e., the rate of surivavl was not the same
ggplot(titanic, aes(x=Sex, fill=Survived)) + geom_bar(position="fill") + ylab("proportion")
ggplot(titanic, aes(x=Sex, fill=Survived)) + geom_bar(position="dodge") + ylab("proportion")
ggplot(tips, aes(x=day, fill=gender)) + geom_bar()
str(tips)
ggplot(tips, aes(x=day, fill=sex)) + geom_bar()
tips$day = relevel(tips$day, "Thur")
ggplot(tips, aes(x=day, fill=sex)) + geom_bar()
tips$day = relevel(tips$day, "Thur")
ggplot(tips, aes(x=day, fill=sex)) + geom_bar() + lab(x="Day of Week", y="Count", title="Gender of payer by day")
tips$day = relevel(tips$day, "Thur")
ggplot(tips, aes(x=day, fill=sex)) + geom_bar() + labs(x="Day of Week", y="Count", title="Gender of payer by day")
tips$day = relevel(tips$day, "Thur")
ggplot(tips, aes(x=day)) + geom_bar(fill=sex) + labs(x="Day of Week", y="Count", title="Gender of payer by day")
tips$day = relevel(tips$day, "Thur")
ggplot(tips, aes(x=day, fill=sex)) + geom_bar() + labs(x="Day of Week", y="Count", title="Gender of payer by day")
tips$day = relevel(tips$day, "Thur")
ggplot(tips, aes(x=day, fill=sex)) + geom_bar() + labs(x="Day of Week", y="Count", title="Gender of payer by day") + ylab("proportion")
tips$day = relevel(tips$day, "Thur")
ggplot(tips, aes(x=day, fill=sex)) + geom_bar(position="fill") + labs(x="Day of Week", y="Count", title="Gender of payer by day") + ylab("proportion")
tips$day = relevel(tips$day, "Thur")
# Option 1 - y-label is shown proportionally
ggplot(tips, aes(x=day, fill=sex)) + geom_bar(position="fill") + labs(x="Day of Week", y="Count", title="Gender of payer by day") + ylab("proportion")
# Option 2 - y-label is by count
ggplot(tips, aes(x=day, fill=sex)) + geom_bar(position="fill") + labs(x="Day of Week", y="Count", title="Gender of payer by day")
tips$day = relevel(tips$day, "Thur")
# Option 1 - y-label is shown proportionally
ggplot(tips, aes(x=day, fill=sex)) + geom_bar(position="fill") + labs(x="Day of Week", y="Count", title="Gender of payer by day") + ylab("proportion")
# Option 2 - y-label is by count
ggplot(tips, aes(x=day, fill=sex)) + geom_bar() + labs(x="Day of Week", y="Count", title="Gender of payer by day")
tips$day = relevel(tips$day, "Thur")
# Option 1 - y-label is shown proportionally
ggplot(tips, aes(x=day, fill=sex)) + geom_bar(position="fill") + labs(x="Day of Week", y="Count", title="Percent of payers by gender for each day") + ylab("proportion")
# Option 2 - y-label is by count
ggplot(tips, aes(x=day, fill=sex)) + geom_bar() + labs(x="Day of Week", y="Count", title="Number of payers by gender for each day")
day = tips$day
day = relevel(day, "Thur")
day = tips$day
day = relevel(day, "Thur")
levels(day)
