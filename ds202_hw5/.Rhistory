getOriginalData = function() {
data <- readRDS("alcohol.rds")
}
# Make a copy of the original data
new_data <- data
head(new_data$`Store Location`, n=100)
# Parse out Latitude into it's own column
new_data <- new_data %>% mutate(Latitude = as.double(str_extract(`Store Location`, "\\d{2}\\.\\d{5}")))
# Parse out Longitude into it's own column
new_data <- new_data %>% mutate(Longitude = as.double(str_extract(`Store Location`, "\\-\\d{2}\\.\\d{5}")))
# Filter out rows with no data
new_data <- new_data %>% filter(is.na(Latitude) | is.na(Longitude))
#print(data %>% select(`Store Location`))
#print(new_data %>% select(Latitude, Longitude))
#print(new_data$Latitude[1], digits=10)
# Make a copy of the original data
new_data <- data
#head(new_data$`Store Location`, n=100)
# Parse out Latitude into it's own column
new_data <- new_data %>% mutate(Latitude = as.double(str_extract(`Store Location`, "\\d{2}\\.\\d{5}")))
# Parse out Longitude into it's own column
new_data <- new_data %>% mutate(Longitude = as.double(str_extract(`Store Location`, "\\-\\d{2}\\.\\d{5}")))
# Filter out rows with no data
new_data <- new_data %>% filter(!is.na(Latitude) | !is.na(Longitude))
#print(data %>% select(`Store Location`))
#print(new_data %>% select(Latitude, Longitude))
#print(new_data$Latitude[1], digits=10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate) # Time
library(scales)    # For currency
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# If needed
getOriginalData = function() {
data <- readRDS("alcohol.rds")
}
# Make a copy of the original data
new_data <- data
#head(new_data$`Store Location`, n=100)
# Parse out Latitude into it's own column
new_data <- new_data %>% mutate(Latitude = as.double(str_extract(`Store Location`, "\\d{2}\\.\\d{5}")))
# Parse out Longitude into it's own column
new_data <- new_data %>% mutate(Longitude = as.double(str_extract(`Store Location`, "\\-\\d{2}\\.\\d{5}")))
# Filter out rows with no data
new_data <- new_data %>% filter(!is.na(Latitude) | !is.na(Longitude))
#print(data %>% select(`Store Location`))
#print(new_data %>% select(Latitude, Longitude))
#print(new_data$Latitude[1], digits=10)
# 1. Convert the date
new_data <- new_data %>% mutate(Date = mdy(Date))
# 2. Convert Vendor Number
new_data <- new_data %>% mutate(`Vendor Number` = as.integer(`Vendor Number`))
# 3.  Convert Pack to Integer
new_data <- new_data %>% mutate(Pack = as.integer(Pack))
# 4.  Bottles sold to integer
new_data <- new_data %>% mutate(`Bottles Sold` = as.integer(`Bottles Sold`))
# 5.  Convert bottle cost to currency
new_data <- new_data %>% mutate(`Sale (Dollars)` = as.integer(`Sale (Dollars)`))
#str(new_data)
# Already converted as part of the previous step
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate) # Time
library(scales)    # For currency
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# If needed
getOriginalData = function() {
data <- readRDS("alcohol.rds")
}
# Make a copy of the original data
new_data <- data
#head(new_data$`Store Location`, n=100)
# Parse out Latitude into it's own column
new_data <- new_data %>% mutate(Latitude = as.double(str_extract(`Store Location`, "\\d{2}\\.\\d{5}")))
# Parse out Longitude into it's own column
new_data <- new_data %>% mutate(Longitude = as.double(str_extract(`Store Location`, "\\-\\d{2}\\.\\d{5}")))
# Filter out rows with no data
new_data <- new_data %>% filter(!is.na(Latitude) | !is.na(Longitude))
#print(data %>% select(`Store Location`))
#print(new_data %>% select(Latitude, Longitude))
#print(new_data$Latitude[1], digits=10)
# 1. Convert the date
new_data <- new_data %>% mutate(Date = mdy(Date))
# 2. Convert Vendor Number
new_data <- new_data %>% mutate(`Vendor Number` = as.integer(`Vendor Number`))
# 3.  Convert Pack to Integer
new_data <- new_data %>% mutate(Pack = as.integer(Pack))
# 4.  Bottles sold to integer
new_data <- new_data %>% mutate(`Bottles Sold` = as.integer(`Bottles Sold`))
# 5.  Convert bottle cost to currency
new_data <- new_data %>% mutate(`Sale (Dollars)` = as.integer(`Sale (Dollars)`))
#str(new_data)
# Already converted as part of the previous step
new_data %>% ggplot(aes(x = Longitude, y = Latitude)) + geom_point()
str(new_data$`Category Name`)
?factor
new_data = factor(new_data$`Category Name`)
str(new_data)
str(new_data)
new_data = factor(new_data$`Category Name`)
head(new_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate) # Time
library(scales)    # For currency
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# If needed
getOriginalData = function() {
data <- readRDS("alcohol.rds")
}
# Make a copy of the original data
new_data <- data
#head(new_data$`Store Location`, n=100)
# Parse out Latitude into it's own column
new_data <- new_data %>% mutate(Latitude = as.double(str_extract(`Store Location`, "\\d{2}\\.\\d{5}")))
# Parse out Longitude into it's own column
new_data <- new_data %>% mutate(Longitude = as.double(str_extract(`Store Location`, "\\-\\d{2}\\.\\d{5}")))
# Filter out rows with no data
new_data <- new_data %>% filter(!is.na(Latitude) | !is.na(Longitude))
#print(data %>% select(`Store Location`))
#print(new_data %>% select(Latitude, Longitude))
#print(new_data$Latitude[1], digits=10)
# 1. Convert the date
new_data <- new_data %>% mutate(Date = mdy(Date))
# 2. Convert Vendor Number
new_data <- new_data %>% mutate(`Vendor Number` = as.integer(`Vendor Number`))
# 3.  Convert Pack to Integer
new_data <- new_data %>% mutate(Pack = as.integer(Pack))
# 4.  Bottles sold to integer
new_data <- new_data %>% mutate(`Bottles Sold` = as.integer(`Bottles Sold`))
# 5.  Convert bottle cost to currency
new_data <- new_data %>% mutate(`Sale (Dollars)` = as.integer(`Sale (Dollars)`))
#str(new_data)
# Already converted as part of the previous step
new_data %>% ggplot(aes(x = Longitude, y = Latitude)) + geom_point()
new_data$`Category Name` = factor(new_data$`Category Name`)
str(new_data)
new_data %>% ggplot(aes(x = `Category Name`, group_by(`Volume Sold (Gallons)`))) + geom_bar()
new_data %>% ggplot(aes(x = `Category Name`, group_by = `Volume Sold (Gallons)`)) + geom_bar()
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) + geom_bar()
str(new_data)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) + geom_bar()
#new_data$`Category Name` = factor(new_data$`Category Name`)
#str(new_data)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) + geom_bar()
#new_data$`Category Name` = factor(new_data$`Category Name`)
#str(new_data)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) + geom_bar()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate) # Time
library(scales)    # For currency
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# If needed
getOriginalData = function() {
data <- readRDS("alcohol.rds")
}
# Make a copy of the original data
new_data <- data
#head(new_data$`Store Location`, n=100)
# Parse out Latitude into it's own column
new_data <- new_data %>% mutate(Latitude = as.double(str_extract(`Store Location`, "\\d{2}\\.\\d{5}")))
# Parse out Longitude into it's own column
new_data <- new_data %>% mutate(Longitude = as.double(str_extract(`Store Location`, "\\-\\d{2}\\.\\d{5}")))
# Filter out rows with no data
new_data <- new_data %>% filter(!is.na(Latitude) | !is.na(Longitude))
#print(data %>% select(`Store Location`))
#print(new_data %>% select(Latitude, Longitude))
#print(new_data$Latitude[1], digits=10)
# 1. Convert the date
new_data <- new_data %>% mutate(Date = mdy(Date))
# 2. Convert Vendor Number
new_data <- new_data %>% mutate(`Vendor Number` = as.integer(`Vendor Number`))
# 3.  Convert Pack to Integer
new_data <- new_data %>% mutate(Pack = as.integer(Pack))
# 4.  Bottles sold to integer
new_data <- new_data %>% mutate(`Bottles Sold` = as.integer(`Bottles Sold`))
# 5.  Convert bottle cost to currency
new_data <- new_data %>% mutate(`Sale (Dollars)` = as.integer(`Sale (Dollars)`))
#str(new_data)
# Already converted as part of the previous step
new_data %>% ggplot(aes(x = Longitude, y = Latitude)) + geom_point()
new_data$`Category Name` = factor(new_data$`Category Name`)
#str(new_data)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) + geom_bar()
#new_data$`Category Name` = factor(new_data$`Category Name`)
#str(new_data)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) + geom_bar()
#new_data$`Category Name` = factor(new_data$`Category Name`)
#str(new_data)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) + geom_bar()
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
labels(x = "Category name", y = "Number sold")
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
labs(x = "Category name", y = "Number sold")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
data(nasa, package="GGally")
nasa %>% filter(id=="1-1") %>%
ggplot(aes(x = time, y= temperature)) + geom_point()
nasa %>% filter(id=="1-1") %>%
ggplot(aes(x = time, y= temperature)) + geom_point() +
geom_smooth(method="lm")
nasa %>% filter(id=="1-1") %>%
ggplot(aes(x = time, y= temperature)) + geom_point() +
geom_smooth(method="lm") +
geom_text(aes(label=id), colour="red",
data=nasa %>% filter(id=="1-1", time==50))
nasa %>% filter(id=="1-1") %>%
ggplot(aes(x = time, y= temperature)) + geom_point() +
geom_smooth(method="lm") +
geom_text(aes(label=id, colour=id),
data=nasa %>% filter(id=="1-1", time==50))
nasa %>% filter(id=="1-1") %>%
ggplot(aes(x = time, y= temperature, colour=id)) + geom_point() +
geom_smooth(method="lm") +
geom_text(aes(label=id),
data=nasa %>% filter(id=="1-1", time==50))
nasa %>% filter(id=="1-1") %>%
ggplot(aes(x = time, y= temperature)) +
geom_point(color='blue')
nasa %>% filter(id=="1-1") %>%
ggplot(aes(x = time, y= temperature)) +
geom_point(aes(color='blue'))
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = 10) +
labs(x = "Category name", y = "Number sold")
factors(new_data$`Category Name`)
levels(new_data$`Category Name`)
length(levels(new_data$`Category Name`))
x = seq(1:123:10)
?seq
x = seq(from=1, to=123, by=10)
x
indices = seq(from = 1, to = length(levels(new_data$`Category Name`)), by = 10)
labels = new_data$`Category Name`[indices]
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
labs(x = "Category name", y = "Number sold")
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
# Get the daily sales of liquor in Ames in 2018
str(new_data)
new_data$`Category Name` = factor(new_data$`Category Name`)
#str(new_data)
indices = seq(from = 1, to = length(levels(new_data$`Category Name`)), by = 5)
labels = new_data$`Category Name`[indices]
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
new_data$`Category Name` = factor(new_data$`Category Name`)
#str(new_data)
# Obviously this is not the best.  For instance, it doesn't end up showing the largest category.
#indices = seq(from = 1, to = length(levels(new_data$`Category Name`)), by = 5)
#labels = new_data$`Category Name`[indices]
labels = new_data %>% filter(`Volume Sold (Gallons)` > 10000)
str(labels)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
temp_data = new_data %>% filter(`Volume Sold (Gallons)` > 10000)
temp_data$`Category Name` = factor(temp_data$`Category Name`)
str(temp_data$`Category Name`)
head(temp_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate) # Time
library(scales)    # For currency
if (file.exists("alcohol.rds")) {
data <- readRDS("alcohol.rds")
} else {
url <- "https://xdaiisu.github.io/ds202materials/data/ames.csv"
data <- readr::read_csv(url)
saveRDS(data, file="alcohol.rds")
}
# If needed
getOriginalData = function() {
data <- readRDS("alcohol.rds")
}
# Make a copy of the original data
new_data <- data
#head(new_data$`Store Location`, n=100)
# Parse out Latitude into it's own column
new_data <- new_data %>% mutate(Latitude = as.double(str_extract(`Store Location`, "\\d{2}\\.\\d{5}")))
# Parse out Longitude into it's own column
new_data <- new_data %>% mutate(Longitude = as.double(str_extract(`Store Location`, "\\-\\d{2}\\.\\d{5}")))
# Filter out rows with no data
new_data <- new_data %>% filter(!is.na(Latitude) | !is.na(Longitude))
#print(data %>% select(`Store Location`))
#print(new_data %>% select(Latitude, Longitude))
#print(new_data$Latitude[1], digits=10)
# 1. Convert the date
new_data <- new_data %>% mutate(Date = mdy(Date))
# 2. Convert Vendor Number
new_data <- new_data %>% mutate(`Vendor Number` = as.integer(`Vendor Number`))
# 3.  Convert Pack to Integer
new_data <- new_data %>% mutate(Pack = as.integer(Pack))
# 4.  Bottles sold to integer
new_data <- new_data %>% mutate(`Bottles Sold` = as.integer(`Bottles Sold`))
# 5.  Convert bottle cost to currency
new_data <- new_data %>% mutate(`Sale (Dollars)` = as.integer(`Sale (Dollars)`))
#str(new_data)
# Already converted as part of the previous step
new_data %>% ggplot(aes(x = Longitude, y = Latitude)) + geom_point()
new_data$`Category Name` = factor(new_data$`Category Name`)
# Obviously this is not the best.  For instance, it doesn't end up showing the largest category.
#indices = seq(from = 1, to = length(levels(new_data$`Category Name`)), by = 5)
#labels = new_data$`Category Name`[indices]
str(new_data)
temp_data = new_data %>% filter(`Volume Sold (Gallons)` > 10000)
head(temp_data)
temp_data$`Category Name` = factor(temp_data$`Category Name`)
str(temp_data$`Category Name`)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
# Order the categories by the number sold.  Get their labels for the chart
temp_data <- new_data %>% desc(`Volume Sold (Gallons)`)
# Order the categories by the number sold.  Get their labels for the chart
temp_data <- new_data %>% arrange(desc(`Volume Sold (Gallons)`))
temp_data$`Category Name` = factor(temp_data$`Category Name`)
str(temp_data$`Category Name`[1:20])
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
labels = temp_data$`Category Name`[1:20]
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
# Order the categories by the number sold.  Get their labels for the chart
temp_data <- new_data %>% arrange(desc(`Volume Sold (Gallons)`))
#temp_data$`Category Name` = factor(temp_data$`Category Name`)
labels = temp_data$`Category Name`[1:20]
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
# Get the daily sales of liquor in Ames in 2018
str(new_data)
Ames.data = new_data %>% filter(year(2018), City == "Ames")
Ames.data = new_data %>% filter(year(2018), City = "Ames")
Ames.data = new_data %>% filter(year(2018), City == "Ames")
Ames.data = new_data %>% filter(year(Date) == 2018, City == "Ames")
head(Ames.data)
# Plot volume sold by day
Ames.data %>% ggplot(aes(x=`Volume Sold (Gallons)`)) +
geom_point()
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = Date, y=`Volume Sold (Gallons)`)) +
geom_point()
# Get the daily sales of liquor in Ames in 2018
Ames.data = new_data %>% filter(year(Date) == 2018, City == "Ames")
# Summarize number of sales, volume of liquor sold and amount of money spent
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = Date, y=`Volume Sold (Gallons)`)) +
geom_point()
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = Date, y=`Volume Sold (Gallons)`), group_by = Date) +
geom_point()
View(Ames.data)
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = Date, y=`Volume Sold (Gallons)`), group_by = day(Date)) +
geom_point()
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = Date, y=`Volume Sold (Gallons)`)) +
geom_point() +
facet_grid(cols=month(Date))
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = Date, y=`Volume Sold (Gallons)`)) +
geom_point() +
facet_grid(cols=vars(month(Date)))
# Get the daily sales of liquor in Ames in 2018
Ames.data = new_data %>% filter(year(Date) == 2018, City == "Ames")
# Summarize number of sales, volume of liquor sold and amount of money spent
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = day(Date), y=`Volume Sold (Gallons)`)) +
geom_point()
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = day(Date), y=`Volume Sold (Gallons)`), group_by = day(Date)) +
geom_point()
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = day(Date), y=`Volume Sold (Gallons)`), group_by = day(Date)) +
geom_point() +
facet_grid(cols = vars(month(Date)))
str(Ames.data)
# Summarize number of sales, volume of liquor sold and amount of money spent
Ames.data %>% mutate(`Money Spent` = `State Bottle Retail` * `Bottles Sold`)
Ames.data %>% select(`Bottles Sold`, `Volume Sold (Gallons)`, `Money Spent`)
str(Ames.data)
# Summarize number of sales, volume of liquor sold and amount of money spent
Ames.data <- Ames.data %>% mutate(`Money Spent` = `State Bottle Retail` * `Bottles Sold`)
str(Ames.data)
Ames.data %>% select(`Bottles Sold`, `Volume Sold (Gallons)`, `Money Spent`)
Ames.data %>% select(`Bottles Sold`, `Volume Sold (Gallons)`, `Money Spent`) %>% summarize()
Ames.data %>% select(`Bottles Sold`, `Volume Sold (Gallons)`, `Money Spent`) %>% summary()
# Plot volume sold by day
Ames.data %>% ggplot(aes(x = day(Date), y=`Volume Sold (Gallons)`), group_by = day(Date)) +
geom_point() +
facet_grid(cols = vars(month(Date)))
# Obviously this is not the best.  For instance, it doesn't end up showing the largest category.
#indices = seq(from = 1, to = length(levels(new_data$`Category Name`)), by = 5)
#labels = new_data$`Category Name`[indices]
# Order the categories by the number sold.  Get their labels for the chart
temp_data <- new_data %>% arrange(desc(`Volume Sold (Gallons)`))
temp_data$`Category Name` = factor(temp_data$`Category Name`)
labels = temp_data$`Category Name`[1:20]
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
# Obviously this is not the best.  For instance, it doesn't end up showing the largest category.
#indices = seq(from = 1, to = length(levels(new_data$`Category Name`)), by = 5)
#labels = new_data$`Category Name`[indices]
# Order the categories by the number sold.  Get their labels for the chart
temp_data <- new_data %>% arrange(desc(`Volume Sold (Gallons)`))
# temp_data$`Category Name` = factor(temp_data$`Category Name`)
labels = temp_data$`Category Name`[1:20]
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
head(temp_data)
head(temp_data$`Volume Sold (Gallons)`)
head(temp_data)
new_data %>% ggplot(aes(x = `Category Name`), group_by = `Volume Sold (Gallons)`) +
geom_bar() +
scale_x_discrete(breaks = labels) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Category name", y = "Number sold")
str(Ames.data)
print(Ames.data$Date)
# Get the daily sales of liquor in Ames in 2018
Ames.data = new_data %>% filter(year(Date) == "2018", City == "Ames")
str(Ames.data)
print(Ames.data$Date)
tail(Ames.data$Date)
# Summarize number of sales, volume of liquor sold and amount of money spent
Ames.data %>% mutate(`Money Spent` = `State Bottle Retail` * `Bottles Sold`) %>% select(`Bottles Sold`, `Volume Sold (Gallons)`, `Money Spent`) %>% summary()
# Get the daily sales of liquor in Ames in 2018
Ames.data = new_data %>% filter(year(Date) == "2018", City == "Ames")
str(Ames.data)
tail(Ames.data$Date)
# Summarize number of sales, volume of liquor sold and amount of money spent
Ames.data %>% mutate(`Money Spent` = `State Bottle Retail` * `Bottles Sold`) %>% select(`Bottles Sold`, `Volume Sold (Gallons)`, `Money Spent`) %>% summary()
# Plot volume sold by day.  Not good - need to collect this together.  It's the chickweight all over again.
Ames.data %>% ggplot(aes(x = day(Date), y=`Volume Sold (Gallons)`), group_by = day(Date)) +
geom_point() +
facet_grid(cols = vars(month(Date)))
# Plot volume sold by day.  Not good - need to collect this together.  It's the chickweight all over again.
Ames.data %>% ggplot(aes(x = day(Date), y=`Volume Sold (Gallons)`), group_by = day(Date)) +
geom_point() +
facet_grid(cols = vars(month(Date, label=TRUE)))
